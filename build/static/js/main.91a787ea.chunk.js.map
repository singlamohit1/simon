{"version":3,"sources":["components/header.js","buzzer.mp3","components/game.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Game","dangerstate","useSound","boopSfx","play","useState","gamestarted","setgamestarted","level","setlevel","tilearray","settilearray","curindex","setcurindex","setdangerzone","dangerzone","msg","setmsg","applyglobal1","setapplyglobal1","applyglobal2","setapplyglobal2","applyglobal3","setapplyglobal3","applyglobal4","setapplyglobal4","prevscore","setprevscore","bestscore","setbestscore","changeGameStatus","rn","Math","floor","random","recoredresponse","tile","index","length","className1","join","className2","className3","className4","onClick","App","className5","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91a787ea.chunk.js","sourcesContent":["import './header.css'\nconst Header = ()=>{\n\n  return (\n      <div  className=\"headerstyle\" >\n          <p>Simon Game</p>\n      </div>\n\n     \n  )\n}\n\nexport default Header","export default __webpack_public_path__ + \"static/media/buzzer.98f26099.mp3\";","import  {useState} from 'react'\nimport useSound from 'use-sound';\nimport './game.css'\nimport boopSfx from '../../src/buzzer.mp3';\n\nconst Game = ({dangerstate})=>{\n  const [play] = useSound(boopSfx);\n    const [gamestarted, setgamestarted] = useState(false);\n    const [level, setlevel] = useState(1);\n    const [tilearray, settilearray] = useState([]);\n    const [curindex, setcurindex] = useState(0);\n    const { dangerzone, setdangerzone } = dangerstate\n    const [msg, setmsg] = useState(\"\");\n    const [applyglobal1, setapplyglobal1] = useState(false);\n    const [applyglobal2, setapplyglobal2] = useState(false);\n    const [applyglobal3, setapplyglobal3] = useState(false);\n    const [applyglobal4, setapplyglobal4] = useState(false);\n    const [applyglobal, setapplyglobal] = useState(false);\n    const [prevscore, setprevscore] = useState(\"\");\n    const [bestscore, setbestscore] = useState(\"\");\n\n    const changeGameStatus = ()=>  {\n        setgamestarted(!gamestarted)\n        setdangerzone(false)\n        if(!gamestarted)\n        {\n          // audioElement.play();\n            const rn =  Math.floor(Math.random() * 4) + 1  ;\n            settilearray(tilearray => [...tilearray, rn])\n            play()\n            switch (rn) {\n                case 1:\n                    setapplyglobal1(true)\n                  break;\n                  case 2:\n                    setapplyglobal2(true)\n                  break;\n                  case 3:\n                    setapplyglobal3(true)\n                  break;\n                  case 4:\n                    setapplyglobal4(true)\n                  break;\n                  default :\n                  break;\n\n              }\n            \n        }\n        else\n        {\n            setlevel(1);\n            settilearray([]);\n            setcurindex(0)\n            setapplyglobal1(false)\n            setapplyglobal2(false)\n            setapplyglobal3(false)\n            setapplyglobal4(false)\n        }\n\n    }\n  \n\n    const recoredresponse = (tile)=>  {\n        play()\n        if(gamestarted)\n        {\n            if(tile===tilearray[curindex])\n            {\n                setcurindex(index => index+1)\n                if(curindex === tilearray.length-1)\n                {\n                    setlevel(level => level+1)\n                    setcurindex(0);\n\n                    const rn =  Math.floor(Math.random() * 4) + 1  ;\n                    settilearray(tilearray => [...tilearray, rn])\n                    play()\n                    switch (rn) {\n                        case 1:\n                            setapplyglobal1(true)\n                          break;\n                          case 2:\n                            setapplyglobal2(true)\n                          break;\n                          case 3:\n                            setapplyglobal3(true)\n                          break;\n                          case 4:\n                            setapplyglobal4(true)\n                          break;\n                          default :\n                           break;\n        \n                      }\n                }\n                else\n                {\n                  setapplyglobal1(false)\n                  setapplyglobal2(false)\n                  setapplyglobal3(false)\n                  setapplyglobal4(false)\n                }\n\n            }\n            else\n            {\n                setlevel(1);\n                settilearray([]);\n                setcurindex(0)  \n                setprevscore(level)\n                setdangerzone(true)\n                if(bestscore && prevscore<bestscore)\n                setbestscore(level)\n                setgamestarted(false)\n                setmsg(\"game over\")\n                setapplyglobal1(false)\n                setapplyglobal2(false)\n                setapplyglobal3(false)\n                setapplyglobal4(false)\n            }\n\n\n        }\n\n    }\n\n//   var className1 = !applyglobal ? \"tile1\" : [\"tile1\",\"tile1glow\"];\n  var className1 = !applyglobal1 ? \"tile1\" : [\"tile1\" , \"tile1glow\"].join(' ');\n  var className2 = !applyglobal2 ? \"tile2\" : [\"tile2\" , \"tile2glow\"].join(' ');\n  var className3 = !applyglobal3 ? \"tile3\" : [\"tile3\" , \"tile3glow\"].join(' ');\n  var className4 = !applyglobal4 ? \"tile4\" : [\"tile4\" , \"tile4glow\"].join(' ');\n  \n  \n  return (\n    <div  className=\"gamestyle\" >\n        {/* <p>Game Started -  <b>{String(gamestarted)}</b>.</p> */}\n\n        {/* <p>Current Tile Array -  {tilearray.map((n)=>{\n            <p>n</p>\n        })}</p>\n        {tilearray.map((n)=>{\n            <p>n</p>\n        })} */}\n        {/* <p>{tilearray}</p> */}\n       \n        {msg ?  <p>{msg}...Thanks for playing</p>:null}\n      \n        {gamestarted ? <p>Level - {level}</p>:null}\n        \n        <div className=\"first2tiles\">\n            <div className={className1}onClick={() => recoredresponse(1)}></div>\n            <div className={className2} onClick={() => recoredresponse(2)}></div>\n        </div>\n        <div className=\"last2tiles\">\n            <div className={className3} onClick={() => recoredresponse(3)}></div>\n            <div className={className4} onClick={() => recoredresponse(4)}></div>\n        </div>\n \n        {!gamestarted ? <button className=\"button\" onClick={changeGameStatus}>START</button>\n        : <button className=\"button\" onClick={changeGameStatus}>STOP</button>\n    }\n           { prevscore ? <p>Previous Score - {prevscore} </p>:null}\n        { prevscore ? <p>Best Score - {bestscore} </p>:null}\n     </div>\n  )\n}\n\nexport default Game","import react , {useState} from 'react'\nimport Header from './components/header'\nimport Game from './components/game'\nimport './App.css'\nconst App = ()=>{\n  const [dangerzone,setdangerzone] = useState(false)\n  var className5 = !dangerzone ? \"App\" : [\"App\" , \"Appglow\"].join(' ');\n\n  return (\n    <div  className={className5}>\n      <Header/>\n      <Game dangerstate={{ dangerzone: dangerzone, setdangerzone: setdangerzone }}/>\n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}